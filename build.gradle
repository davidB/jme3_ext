plugins {
	id "nebula.provided-base" version "3.0.3"
	id "org.xtext.xtend" version "1.0.3"
	id "net.ltgt.apt" version "0.5"
	id "java"
	id "eclipse"
	id "maven-publish"
}

version = "git describe --always --dirty".execute().text.trim()
println("version : '${version}'")

sourceCompatibility = '1.8'
targetCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
	mavenLocal()
	jcenter()
	maven { url "http://dl.bintray.com/jmonkeyengine/contrib" }
	maven { url "https://jitpack.io" }
}

dependencies {
	apt     'com.google.dagger:dagger-compiler:2.0.2'
	compile 'com.google.dagger:dagger:2.0.2'
	compile "org.slf4j:slf4j-api:${v_slf4j}"
	compile "org.slf4j:jul-to-slf4j:${v_slf4j}"
	compile 'org.eclipse.xtend:org.eclipse.xtend.lib:2.9.+'
	provided "org.jmonkeyengine:jme3-core:${v_jme}"
	provided 'com.jme3x:jfx:1.+'
	provided 'io.reactivex:rxjava:1.1.1'
	
	// runtime "com.jme3:jme3-lwjgl:${v_jme}"
	// runtime("com.jme3:jme3-desktop:${v_jme}"){
	// 	exclude module: "jinput"
	// }
	// runtime 'net.java.jinput:jinput:2.0.6'
	// runtime "com.jme3:jme3-jogg:${v_jme}"
	// runtime 'ch.qos.logback:logback-classic:1.1.2'

	testCompile 'junit:junit:4.11'
	testCompile 'org.mockito:mockito-core:1.8.5'
	
	testCompile "org.jmonkeyengine:jme3-lwjgl:${v_jme}"
	testCompile "org.jmonkeyengine:jme3-jogl:${v_jme}"
}

//------------------------------------------------------------------------------

task copyDeps {
	description 'copy runtime + testRuntime dependencies into lib/ dir to allow other tools (jme3-SDK, eclipse apt-processor) to use libs'
  copy {
    from configurations.runtime
    into 'lib/main'
  }
  copy {
    from (configurations.testRuntime - configurations.runtime)
    into 'lib/test'
  }
}

//------------------------------------------------------------------------------
// maven-publish

task sourcesJar(type: Jar) {
	from sourceSets.main.allSource
	exclude 'Textures/**'
	classifier = 'sources'
}

task noTexturesJar(type: Jar) {
	from sourceSets.main.output
	exclude 'Textures/**'
	classifier = 'notextures'
}

task texturesJar(type: Jar) {
	from sourceSets.main.output
	include 'Textures/**'
	classifier = 'textures'
}

def pomConfig = {
	licenses {
		license {
			name "Public domain (CC0-1.0)"
			url "http://creativecommons.org/publicdomain/zero/1.0/"
			distribution "repo"
		}
	}
	developers {
		developer {
			id "davidB"
			name "David Bernard"
		}
	}
}
afterEvaluate { project ->
publishing {
	publications {
		mavenStuff(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact noTexturesJar
			artifact texturesJar
			artifacts.all ({
			 if (it.extension == 'jar' && it.classifier == null) {
				it.classifier = 'all'
			 } else if (it.extension == 'jar' && it.classifier == 'notextures') {
				it.classifier = null
			 }
			})
			pom.withXml {
				def root = asNode()
				if (description) root.appendNode('description', project.description)
				root.children().last() + pomConfig
			}
		}
	}
}
}